version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: acs-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=ACS_Dev_Pass123!
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "ACS_Dev_Pass123!" -C -Q "SELECT 1"
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: acs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebApi Service
  webapi:
    build:
      context: .
      dockerfile: ACS.WebApi/Dockerfile
    container_name: acs-webapi
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:5001;http://+:5000
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ACSDatabase;User Id=sa;Password=ACS_Dev_Pass123!;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./keys:/app/keys
    networks:
      - acs-network

  # Dashboard Service
  dashboard:
    build:
      context: .
      dockerfile: ACS.Dashboard/Dockerfile
    container_name: acs-dashboard
    ports:
      - "5100:5100"
      - "5101:5101"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:5101;http://+:5100
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ACSDatabase;User Id=sa;Password=ACS_Dev_Pass123!;TrustServerCertificate=true
      - WebApiUrl=http://webapi:5000
    depends_on:
      webapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - acs-network

  # Tenant Process 1
  tenant1:
    build:
      context: .
      dockerfile: ACS.VerticalHost/Dockerfile
    container_name: acs-tenant1
    ports:
      - "6000:6000"
      - "6001:6001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:6001;http://+:6000
      - TENANT_ID=tenant1
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ACSDatabase;User Id=sa;Password=ACS_Dev_Pass123!;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./keys:/app/keys
    networks:
      - acs-network

  # Tenant Process 2
  tenant2:
    build:
      context: .
      dockerfile: ACS.VerticalHost/Dockerfile
    container_name: acs-tenant2
    ports:
      - "6002:6002"
      - "6003:6003"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:6003;http://+:6002
      - TENANT_ID=tenant2
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ACSDatabase;User Id=sa;Password=ACS_Dev_Pass123!;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./keys:/app/keys
    networks:
      - acs-network

  # Tenant Process 3
  tenant3:
    build:
      context: .
      dockerfile: ACS.VerticalHost/Dockerfile
    container_name: acs-tenant3
    ports:
      - "6004:6004"
      - "6005:6005"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:6005;http://+:6004
      - TENANT_ID=tenant3
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=ACSDatabase;User Id=sa;Password=ACS_Dev_Pass123!;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./keys:/app/keys
    networks:
      - acs-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: acs-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    networks:
      - acs-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: acs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - acs-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: acs-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - acs-network

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  acs-network:
    driver: bridge